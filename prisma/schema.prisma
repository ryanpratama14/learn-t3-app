generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma-types"
    output   = "../src/server/api/schema/generated"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                        String     @id @default(cuid())
    createdAt                 DateTime   @default(now())
    name                      String?
    email                     String?    @unique
    emailVerified             DateTime?
    password                  String?
    passwordChanged           DateTime   @default(now())
    accounts                  Account[]
    documents                 Document[]
    image                     Document?  @relation("userImage", fields: [imageId], references: [id])
    imageId                   String?    @unique
    verifyToken               String?    @unique
    verifyTokenExpiry         DateTime?
    forgotPasswordToken       String?    @unique
    forgotPasswordTokenExpiry DateTime?
}

model Document {
    id         String   @id @default(cuid())
    url        String
    name       String
    owner      User     @relation(fields: [ownerId], references: [id])
    ownerId    String
    imageOwner User?    @relation("userImage")
    createdAt  DateTime @default(now())
}

// model Image {
//     id         String   @id @default(cuid())
//     url        String
//     name       String
//     uploadedAt DateTime @default(now())
//     User       User[]
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
